{
	"info": {
		"_postman_id": "ca69ae75-4284-48b4-ac64-95f37051c421",
		"name": "Node API Microservice Reference Architecture",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "users",
			"item": [
				{
					"name": "{id}",
					"item": [
						{
							"name": "show User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b32fe6a7-8afd-4bb4-983d-e6b8bb409b9a",
										"exec": [
											"let body = JSON.parse(pm.variables.get(\"req_body\"));",
											"",
											"// request to get id",
											"pm.sendRequest({",
											"    url: pm.variables.get(\"baseUrl\") + \"/api/users\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify(body)",
											"    }",
											"}, function (err, res) {",
											"    if(err) return;",
											"    pm.environment.set(\"id\", res.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8f09cf3d-88c4-4a90-92da-a5107dffa4d9",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status message is OK\", function () {\r",
											"    pm.expect(pm.response.status).to.be.equal('OK');\r",
											"});\r",
											"\r",
											"pm.test('Json Schema is valid', function() {\r",
											"    let schema = JSON.parse(pm.environment.get(\"schema\"));\r",
											"    var result = tv4.validateMultiple(pm.response.json(), schema);\r",
											"    if(!result.valid) console.log(result);\r",
											"    pm.expect(result.valid).to.be.true;\r",
											"});\r",
											"\r",
											"// VALIDATION DELETE\r",
											"const options = {\r",
											"    url: pm.variables.get(\"baseUrl\") + \"/api/users/\" + pm.response.json().id ,\r",
											"    method: 'DELETE',\r",
											"    header: {\r",
											"        'content-type': 'application/json'\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setTimeout(function() {}, 500),\r",
											"  promise = function(text) {\r",
											"   const promise = new Promise(function(resolve, reject) {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) return reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"   return promise;\r",
											"};\r",
											"    \r",
											"promise(options).then((res) => {\r",
											"    pm.test(\"Status code of the DELETE response\", function () {\r",
											"        pm.expect(res.code).to.eql(202);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Status message is Accepted\", function () {\r",
											"      pm.expect(res.status).to.be.equal('Accepted');\r",
											"    });\r",
											"    \r",
											"}).then((res) => {\r",
											"  clearTimeout(interval);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}",
											"description": "Id of user to show"
										}
									]
								}
							},
							"response": [
								{
									"name": "User not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{baseUrl}}/users/schema type not provided",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"schema type not provided"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "Text",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"<string>\",\n \"details\": \"<string>\"\n}"
								},
								{
									"name": "Return user with given id",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{baseUrl}}/users/schema type not provided",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"schema type not provided"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "Text",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "\"schema type not provided\""
								}
							]
						},
						{
							"name": "update User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "da5dfddf-4c39-4026-8737-7efa5f6b7895",
										"exec": [
											"let body = JSON.parse(pm.variables.get(\"req_body\"));",
											"",
											"// request to get id",
											"pm.sendRequest({",
											"    url: pm.variables.get(\"baseUrl\") + \"/api/users\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify(body)",
											"    }",
											"}, function (err, res) {",
											"    if(err) return;",
											"    pm.environment.set(\"id\", res.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2b8c0bc3-851a-4a6e-9a02-3f432011be46",
										"exec": [
											"pm.test(\"Status code is 202\", function () {\r",
											"    pm.expect(pm.response.code).to.be.equal(202);\r",
											"});\r",
											"\r",
											"pm.test(\"Status message is Accepted\", function () {\r",
											"    pm.expect(pm.response.status).to.be.equal('Accepted');\r",
											"});\r",
											"\r",
											"pm.test('Json Schema is valid', function() {\r",
											"    let schema = JSON.parse(pm.environment.get(\"schema\"));\r",
											"    var result = tv4.validateMultiple(pm.response.json(), schema);\r",
											"    if(!result.valid) console.log(result);\r",
											"    pm.expect(result.valid).to.be.true;\r",
											"});\r",
											"\r",
											"// VALIDATION DELETE\r",
											"const options = {\r",
											"    url: pm.variables.get(\"baseUrl\") + \"/api/users/\" + pm.response.json().id ,\r",
											"    method: 'DELETE',\r",
											"    header: {\r",
											"        'content-type': 'application/json'\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setTimeout(function() {}, 500),\r",
											"  promise = function(text) {\r",
											"   const promise = new Promise(function(resolve, reject) {\r",
											"        pm.sendRequest(options, function (err, response) {\r",
											"            if (err) return reject(err);\r",
											"            resolve(response);\r",
											"        });\r",
											"    });\r",
											"   return promise;\r",
											"};\r",
											"    \r",
											"promise(options).then((res) => {\r",
											"    pm.test(\"Status code of the DELETE response\", function () {\r",
											"        pm.expect(res.code).to.eql(202);\r",
											"    });\r",
											"    \r",
											"    pm.test(\"Status message is Accepted\", function () {\r",
											"      pm.expect(res.status).to.be.equal('Accepted');\r",
											"    });\r",
											"    \r",
											"}).then((res) => {\r",
											"  clearTimeout(interval);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"string\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}",
											"description": "Id of user to update"
										}
									]
								}
							},
							"response": [
								{
									"name": "User not found",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/users/schema type not provided",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"schema type not provided"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "Text",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"<string>\",\n \"details\": \"<string>\"\n}"
								},
								{
									"name": "User updated successfully",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/users/schema type not provided",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"schema type not provided"
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "Text",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "\"schema type not provided\""
								}
							]
						},
						{
							"name": "delete User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d439d283-dc62-4f27-b5b2-a78e21f36081",
										"exec": [
											"let body = JSON.parse(pm.variables.get(\"req_body\"));",
											"",
											"// request to get id",
											"pm.sendRequest({",
											"    url: pm.variables.get(\"baseUrl\") + \"/api/users\",",
											"    method: 'POST',",
											"    header: {",
											"        'content-type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify(body)",
											"    }",
											"}, function (err, res) {",
											"    if(err) return;",
											"    pm.environment.set(\"id\", res.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "33792e88-2a75-4969-aebb-1b4098d70d37",
										"exec": [
											"pm.test(\"Status code is 202\", function () {\r",
											"    pm.expect(pm.response.code).to.be.equal(202);\r",
											"});\r",
											"\r",
											"pm.test(\"Status message is Accepted\", function () {\r",
											"    pm.expect(pm.response.status).to.be.equal('Accepted');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}",
											"description": "Id of user to delete"
										}
									]
								}
							},
							"response": [
								{
									"name": "User not found",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{baseUrl}}/users/schema type not provided",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"schema type not provided"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "Text",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"<string>\",\n \"details\": \"<string>\"\n}"
								},
								{
									"name": "User deleted successfully",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{baseUrl}}/users/schema type not provided",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"schema type not provided"
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "Text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "list Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "09235040-062d-4890-80b6-bb4fb44acfb2",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.be.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status message is OK\", function () {\r",
									"    pm.expect(pm.response.status).to.be.equal('OK');\r",
									"});\r",
									"\r",
									"pm.test('Json Schema is valid', function() {\r",
									"    let schema = JSON.parse(pm.environment.get(\"list_schema\"));\r",
									"    var result = tv4.validateMultiple(pm.response.json(), schema);\r",
									"    if(!result.valid) console.log(result);\r",
									"    pm.expect(result.valid).to.be.true;\r",
									"});\r",
									"\r",
									"// VALIDATION DELETE 1\r",
									"const options = {\r",
									"    url: pm.variables.get(\"baseUrl\") + \"/api/users/\" + pm.variables.get(\"id1\") ,\r",
									"    method: 'DELETE',\r",
									"    header: {\r",
									"        'content-type': 'application/json'\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setTimeout(function() {}, 500),\r",
									"  promise = function(text) {\r",
									"   const promise = new Promise(function(resolve, reject) {\r",
									"        pm.sendRequest(options, function (err, response) {\r",
									"            if (err) return reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"   return promise;\r",
									"};\r",
									"    \r",
									"promise(options).then((res) => {\r",
									"    pm.test(\"Status code of the DELETE response\", function () {\r",
									"        pm.expect(res.code).to.eql(202);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Status message is Accepted\", function () {\r",
									"      pm.expect(res.status).to.be.equal('Accepted');\r",
									"    });\r",
									"    \r",
									"}).then((res) => {\r",
									"  clearTimeout(interval);\r",
									"});\r",
									"\r",
									"// VALIDATION DELETE 2\r",
									"const options2 = {\r",
									"    url: pm.variables.get(\"baseUrl\") + \"/api/users/\" + pm.variables.get(\"id2\") ,\r",
									"    method: 'DELETE',\r",
									"    header: {\r",
									"        'content-type': 'application/json'\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval2 = setTimeout(function() {}, 500),\r",
									"  promise2 = function(text) {\r",
									"   const promise2 = new Promise(function(resolve, reject) {\r",
									"        pm.sendRequest(options2, function (err, response) {\r",
									"            if (err) return reject(err);\r",
									"            resolve(response);\r",
									"        });\r",
									"    });\r",
									"   return promise2;\r",
									"};\r",
									"    \r",
									"promise2(options2).then((res) => {\r",
									"    pm.test(\"Status code of the DELETE response\", function () {\r",
									"        pm.expect(res.code).to.eql(202);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Status message is Accepted\", function () {\r",
									"      pm.expect(res.status).to.be.equal('Accepted');\r",
									"    });\r",
									"    \r",
									"}).then((res) => {\r",
									"  clearTimeout(interval2);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "607f56f1-a796-4f92-81ee-3c41174bd7e0",
								"exec": [
									"let body = JSON.parse(pm.variables.get(\"req_body\"));",
									"",
									"// request to create data in base",
									"pm.sendRequest({",
									"    url: pm.variables.get(\"baseUrl\") + \"/api/users\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(body)",
									"    }",
									"}, function (err, res) {",
									"    if(err) return;",
									"    pm.environment.set(\"id1\", res.json().id);",
									"});",
									"",
									"// request to create data in base",
									"pm.sendRequest({",
									"    url: pm.variables.get(\"baseUrl\") + \"/api/users\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(body)",
									"    }",
									"}, function (err, res) {",
									"    if(err) return;",
									"    pm.environment.set(\"id2\", res.json().id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/api/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": [
						{
							"name": "List of all users",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n \"schema type not provided\",\n \"schema type not provided\"\n]"
						}
					]
				},
				{
					"name": "create User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7febac63-e620-4536-93d5-d1f33575657d",
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.equal(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Status message is Created\", function () {\r",
									"    pm.expect(pm.response.status).to.be.equal('Created');\r",
									"});\r",
									"\r",
									"pm.test('Json Schema is valid', function() {\r",
									"    let schema = JSON.parse(pm.environment.get(\"schema\"));\r",
									"    var result = tv4.validateMultiple(pm.response.json(), schema);\r",
									"    if(!result.valid) console.log(result);\r",
									"    pm.expect(result.valid).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"<string>\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": [
						{
							"name": "User not created because of validation error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"type\": \"<string>\",\n \"details\": [\n  {\n   \"message\": \"<string>\",\n   \"path\": \"<string>\"\n  },\n  {\n   \"message\": \"<string>\",\n   \"path\": \"<string>\"\n  }\n ]\n}"
						},
						{
							"name": "User created successfully",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"schema type not provided\""
						}
					]
				}
			]
		}
	],
	"variable": [
		{
			"id": "baseUrl",
			"key": "baseUrl",
			"value": "/api",
			"type": "string"
		}
	]
}